#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass extarticle
\use_default_options true
\maintain_unincluded_children false
\language italian
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement H
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
Nel file 
\emph on
gameServer.js
\emph default
 vengono implementate tutte quelle funzionalità lato server che servono
 alla corretta realizzazione di una sessione di gioco.
\end_layout

\begin_layout Standard
E' stata utilizzata la libreria 
\series bold
socket.io
\series default
 per implementare una comunicazione real-time bidirezionale basata sugli
 eventi tra il server e i client.
\end_layout

\begin_layout Standard
Sull'evento di connessione da parte di un utente, viene creata una struttura
 dati associata all'utente contenente informazioni quali nickname, score,
 hit, ecc.
 Tutti questi campi vengono inizializzati a zero o null.
\end_layout

\begin_layout Standard
Il server attende l'evento 'new player' per poter assegnare l'username alla
 struttura dati associata in precedenza.
 Nel caso in cui risulti che l'username sia null (per un qualsiasi motivo,
 come problemi di trasmissione, o di rete ad esempio), il server richiede
 di nuovo l'username fino a quando non sarà diverso da null.
 Ciò crea una sorta di loop dal quale non si può uscire fino a quando non
 è stato ricevuto correttamente l'username dell'utente, come mostrato nel
 codice 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:Codice-verifica-username"

\end_inset

.
 Tale azione si è resa necessaria per poter inserire tutti i dati legati
 alla sessione di gioco nel database.
 
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,basicstyle={\scriptsize}"
inline false
status open

\begin_layout Plain Layout

socket.on('new player', function(msg) {
\end_layout

\begin_layout Plain Layout

      if (msg == "") {
\end_layout

\begin_layout Plain Layout

        console.log("Errore Username, notifico ritrasmissione");
\end_layout

\begin_layout Plain Layout

        io.to(socket.id).emit('errorUsername');
\end_layout

\begin_layout Plain Layout

      } else {
\end_layout

\begin_layout Plain Layout

        users[socket.id].nickname = msg;
\end_layout

\begin_layout Plain Layout

        console.log("STAMPO IL NICKNAME :" + users[socket.id].nickname);
\end_layout

\begin_layout Plain Layout

      }
\end_layout

\begin_layout Plain Layout

    });
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "alg:Codice-verifica-username"

\end_inset

Codice verifica username 
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Ogni qualvolta si verifica un evento di 
\emph on
'shot'
\emph default
, relativo allo sparo di un utente, verifica innanzitutto se il colpo è
 valido o meno (cioè se l'utente ha cliccato su una casella libera o su
 una non disponibile perché già colpita in precedenza).
 Nel caso di colpo valido, vengono effettuate le seguenti operazioni:
\end_layout

\begin_layout Itemize
invia un evento al giocatore che ha sparato che permette di sentire lo sparo
 di un cannone;
\end_layout

\begin_layout Itemize
verifica se il gioco è finito (se uno degli utenti ha affondato tutte le
 navi del suo avversario);
\end_layout

\begin_layout Itemize
nel caso in cui il gioco non è concluso, allora effettua un update dello
 stato degli utenti, quindi effettua il cambio turno se il colpo era andato
 a secco, altrimenti l'utente ha possibilità di sparare un altro colpo;
\end_layout

\begin_layout Itemize
update dello score e notifica dello stesso agli utenti;
\end_layout

\begin_layout Itemize
notifica agli utenti se hanno colpito o meno una nave, inviando eventi different
i che permettono loro di ascoltare un suono diverso a seconda dei due casi:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,basicstyle={\scriptsize}"
inline false
status open

\begin_layout Plain Layout

  if (game.getPlayerShot(opponent)) {
\end_layout

\begin_layout Plain Layout

              io.to(socket.id).emit('hit_ship');
\end_layout

\begin_layout Plain Layout

              io.to(game.getPlayerId(opponent)).emit('hit_ship');
\end_layout

\begin_layout Plain Layout

            } else {
\end_layout

\begin_layout Plain Layout

              io.to(socket.id).emit('miss_ship');
\end_layout

\begin_layout Plain Layout

              io.to(game.getPlayerId(opponent)).emit('miss_ship');
\end_layout

\begin_layout Plain Layout

            }
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Invio eventi hit / miss ship
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
Nel caso in cui il colpo non sia valido, viene inviato solo un evento che
 permette al giocatore che ha sparato di udire un sono di warning, segnalando
 quindi un colpo non partito.
 
\end_layout

\begin_layout Standard
Di un certo rilievo sono le funzioni implementate in questo file:
\end_layout

\begin_layout Itemize
la funzione
\series bold
 joinWaitingPlayers()
\series default
: vede gli utenti collegati e crea una sessione di gioco non appena ci sono
 due utenti collegati.
 Ovviamente permette la creazioni di sessioni di gioco multiple nel caso
 ci siano più di due utenti collegati.
 Una volta creata la sessione, ai due utenti viene assegnato un playerID
 (id del giocatore all'interno della sessione di gioco, utile per effettuare
 il cambio di turno ed inviare eventi) e un gameID (id della sessione di
 gioco).
\end_layout

\begin_layout Itemize
la funzione 
\series bold
leaveGame(socket)
\series default
: controlla se uno dei giocatori ha abbandonato lo scontro (disconnessione,
 chiusura della pagina web, ricarica della pagina stessa).
 In questo caso, notifica all'altro utente la disconnessione del suo avversario
 e gli assegna la vittoria.
\end_layout

\begin_layout Itemize
la funzione 
\series bold
checkGameOver(game)
\series default
: verifica se uno dei giocatori ha affondato tutte le navi e in tal caso
 notifica la vittoria / sconfitta al vincitore / perdente.
 Dopodiché chiama la funzione updatePlayer, passando i parametri username
 e score realizzato del player e distinguendo il vincitore dal perdente
 assegnando rispettivamente il valore '1' o '0' al parametro winner.
\end_layout

\begin_layout Itemize
la funzione 
\series bold
updatePlayer(username, score, winner)
\series default
: aggiorna i dati contenuti nel database relativi all'utente identificato
 dall'username che la funzione riceve come parametro.
 In particolare aggiorna lo score totale dell'utente, verifica ed eventualmente
 aggiorna il suo max score se ha effettuato il suo miglior punteggio in
 una partita ed incrementa il numero di vittorie nel caso il parametro winner
 valga '1'.
\end_layout

\begin_layout Standard
Il file 
\emph on
gameServer.js
\emph default
 gestisce, inoltre, anche la chat.
 Quando riceve un evento di tipo 
\emph on
'chat' 
\emph default
da uno dei due player della sessione contenente un messaggio, prende tale
 messaggio e l'username del giocatore che lo ha scritto e li invia nella
 ai due giocatori della sessione di gioco, i quali visualizzeranno la coppia
 username mittente più messaggio nella finestra di chat.
\end_layout

\end_body
\end_document
