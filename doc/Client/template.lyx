#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass extarticle
\use_default_options true
\maintain_unincluded_children false
\language italian
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement H
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
Nel file 
\series bold
client.js
\series default
 vengono implementate tutte le funzionalità lato client.
\end_layout

\begin_layout Standard
Per prima cosa viene effettuata la registrazione al backend, dichiarando
 la variabile 
\emph on
socket = io().
 
\emph default
La connessione verrà notificata dall'evento 
\emph on
connect.
\end_layout

\begin_layout Standard
Alla ricezione di un evento 
\emph on
'join', 
\emph default
preleva la pagina il suo username dalla pagina html di gioco ed invia un
 evento contenente la sua username al server, che terrà traccia delle sue
 informazioni relative alla corrente sessione di gioco.
 Viene inoltre riprodotta una musica di sottofondo nella sessione stessa.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,basicstyle={\scriptsize}"
inline false
status open

\begin_layout Plain Layout

  socket.on('join', function(gameId) {
\end_layout

\begin_layout Plain Layout

    var username = $('#myUsername').text();
\end_layout

\begin_layout Plain Layout

    console.log('Username inviato ' + username);
\end_layout

\begin_layout Plain Layout

    socket.emit('new player', username);
\end_layout

\begin_layout Plain Layout

    Game.initGame();
\end_layout

\begin_layout Plain Layout

	$('#messages').empty();
\end_layout

\begin_layout Plain Layout

    $('#disconnected').hide();
\end_layout

\begin_layout Plain Layout

    $('#waiting-room').hide();
\end_layout

\begin_layout Plain Layout

    $('#game').show();
\end_layout

\begin_layout Plain Layout

    $('#game-number').html(gameId);
\end_layout

\begin_layout Plain Layout

    $('#myScore').html("0");
\end_layout

\begin_layout Plain Layout

    $('#oppScore').html("0");
\end_layout

\begin_layout Plain Layout

    socket.emit('oppNotification');   //Notify opponent's username
\end_layout

\begin_layout Plain Layout

    myMusic.play();
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Ricezione evento 'join'
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Spesso capita che il client invii un username nullo al server, probabilmente
 perché la pagina html del gioco, da cui egli prende il suo username, non
 si è ancora caricata del tutto.
 Allora il server riceve un evento dal server dove viene richiesto di rinviare
 la sua username: tale meccanismo può essere visto come una sorta di loop
 da cui si esce non appena il client sarà riuscito ad inviare un username
 diverso da null.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,basicstyle={\scriptsize}"
inline false
status open

\begin_layout Plain Layout

  socket.on('errorUsername',function(){
\end_layout

\begin_layout Plain Layout

    socket.emit('new player',$('#myUsername').text());
\end_layout

\begin_layout Plain Layout

  });
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Ricezione evento 'errorUsername'
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
E' stata creata una funzione 
\series bold
sound
\series default
 che permette la creazione di un elemento audio a partire da path che specifica
 un file musicale, e i cui metodi 
\emph on
play() 
\emph default
e 
\emph on
stop() 
\emph default
permettono di riprodurre o stoppare la riproduzione del file audio specificato.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,basicstyle={\scriptsize}"
inline false
status open

\begin_layout Plain Layout

function sound(src) {
\end_layout

\begin_layout Plain Layout

  this.sound = document.createElement("audio");
\end_layout

\begin_layout Plain Layout

  this.sound.src = src;
\end_layout

\begin_layout Plain Layout

  this.sound.setAttribute("preload", "auto");
\end_layout

\begin_layout Plain Layout

  this.sound.setAttribute("controls", "none");
\end_layout

\begin_layout Plain Layout

  this.sound.style.display = "none";
\end_layout

\begin_layout Plain Layout

  document.body.appendChild(this.sound);
\end_layout

\begin_layout Plain Layout

  this.play = function() {
\end_layout

\begin_layout Plain Layout

    this.sound.play();
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

  this.stop = function() {
\end_layout

\begin_layout Plain Layout

    this.sound.pause();
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Funzione sound()
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Il client in prevalenza riceve eventi dal lato server e, in conseguenza
 di ciò, avviene qualcosa:
\end_layout

\begin_layout Itemize
alla ricezione dell'evento
\emph on
 'update'
\emph default
 viene aggiornato lo stato del gioco del client;
\end_layout

\begin_layout Itemize
alla ricezione degli eventi 
\emph on
'scoreMe'
\emph default
 e 
\emph on
'scoreOPP'
\emph default
 aggiorna rispettivamente lo score del giocatore e del suo avversario nella
 pagina html di gioco;
\end_layout

\begin_layout Itemize
alla ricezione degli eventi 
\emph on
'gameover_winner'
\emph default
 o 
\emph on
'gameover_loser'
\emph default
 viene decretata la fine del partite corrente ricevendo una notifica testuale
 ed audio diversa che dipende da se il giocatore ha vinto o perso la partita
 corrente;
\end_layout

\begin_layout Itemize
alla ricezione degli eventi di 
\emph on
'valid_shot'
\emph default
 e 
\emph on
'invalid_shot'
\emph default
, che indicano un colpo valido o invalido (a seconda se il client ha precedentem
ente sparato su una casella libera o meno) vengono riprodotto rispettivamente
 il suono di un cannone da guerra o una notifica di warning;
\end_layout

\begin_layout Itemize
alla ricezione degli eventi di 
\emph on
'hit_ship'
\emph default
 e 
\emph on
'miss_ship'
\emph default
, che vengono ricevuti a secondo del fatto che il colpo precedentemente
 inviato dal giocatore abbia colpito o meno una nave avversaria.
 Se una nave è stata colpita, allora viene riprodotto il suono di un esplisone,
 altrimenti viene riprodotto il tipico suono di '
\emph on
splash'
\emph default
;
\end_layout

\begin_layout Standard
Gli eventi che vengono inviati dal client verso il server sono:
\end_layout

\begin_layout Itemize

\emph on
'shot': 
\emph default
viene inviato quando viene chiamata la funzione 
\emph on
sendShot()
\emph default
, cioè quando l'utente clicca su una casella della griglia avversaria durante
 il proprio turno di gioco.
 Come abbiamo visto nel file 
\series bold
gameServer.js
\series default
, alla ricezione di tale evento vengono effettuate varie verifiche (colpo
 valido / invalido, nave colpito / non colpita , gioco completato o meno,
 ecc.
 ) a seconda delle quali vengono inviati vari eventi, alcuni dei quali illustrat
i precedentemente;
\end_layout

\begin_layout Itemize

\emph on
'chat'
\emph default
: viene inviato quando viene premuto il button 
\begin_inset Quotes eld
\end_inset


\emph on
Send Message
\emph default

\begin_inset Quotes erd
\end_inset

 assieme al messaggio testuale presente nella casella di chat del giocatore.
 Alla ricezione di tale evento, il server rinvia ad entrambi gli utenti
 della sessione di gioco la coppia username mittente più messaggio ricevuto
 che verrà visualizzata nella chat dei giocatori.
\end_layout

\begin_layout Standard
Avendo descritto dettagliatamente il comportamento lato client e lato server,
 viene mostrato nell'immagine 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Interazione-client-server"

\end_inset

 un sequence diagram dell'interazione client-server durante una sessione
 di gioco.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /home/pietro/HuntingTheBismarck/doc/Game/img/play battle Sequence Diagram.svg
	lyxscale 50
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Interazione-client-server"

\end_inset

Sequence diagram interazione client-server
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Subsection
game.js
\end_layout

\begin_layout Standard
Il file 
\series bold
game.js
\series default
 fa uso di 
\series bold
canvas
\series default
, un'estensione dell'HTML standard che permette il rendering dinamico di
 immagini bitmap gestibili attraverso un linguaggio di scripting.
\end_layout

\begin_layout Standard
Una delle funzionalità implementate più importanti è quella di realizzare
 la griglia dei giocatori attraverso le seguenti funzioni:
\end_layout

\begin_layout Itemize

\emph on
drawSquares()
\emph default
: disegna le caselle della griglia; 
\end_layout

\begin_layout Itemize

\emph on
drawShips()
\emph default
: disegna le navi sulla griglia;
\end_layout

\begin_layout Itemize

\emph on
drawMarks()
\emph default
: disegna sulla casella l'icona di una palla di fuoco in caso di nave colpita
 e l'icona di splash quando non viene colpita nessuna nave.
\end_layout

\begin_layout Standard
Quando il giocatore clicca una casella della griglia dell'avversario, vengono
 prese le coordinate del mouse al momento del click e viene richiamata la
 funzione 
\emph on
sendShot()
\emph default
.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,basicstyle={\scriptsize}"
inline false
status open

\begin_layout Plain Layout

  canvas[1].addEventListener('click', function(e) {
\end_layout

\begin_layout Plain Layout

    if(turn) {
\end_layout

\begin_layout Plain Layout

      var pos = getCanvasCoordinates(e, canvas[1]);
\end_layout

\begin_layout Plain Layout

      var square = getSquare(pos.x, pos.y);
\end_layout

\begin_layout Plain Layout

      sendShot(square);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

  });
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Click event del giocatore su una casella avversaria
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_body
\end_document
